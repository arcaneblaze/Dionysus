@page "/"
@using System.Diagnostics
@using System.Text.RegularExpressions
@using Dionysus.App.Data
@using Dionysus.App.Helpers
@using Dionysus.App.Logger
@using Dionysus.App.Models

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
<link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet">
<link href="https://fonts.cdnfonts.com/css/cascadia-code" rel="stylesheet">

<div class="profile">
    @if(!string.IsNullOrEmpty(ProfileData.Profile().Image)){
        <img class="profile-image" src="@ProfileData.GetBase64Image(ProfileData.Profile().Image)"/>
    }
    <div style="flex-direction: column">
        <span class="username">
            @ProfileData.Profile().Username
        </span><br/>
        <span class="profile-userinfo">Games: @_gamesList.Count,</span>
        <span class="profile-userinfo">
            Total played: @ProfileData.GetTotalPlayTime().TotalHours.ToString("F0")h 
            @ProfileData.GetTotalPlayTime().Minutes.ToString()m
        </span>
    </div>
</div>
<div class="game-list">
    @foreach (var game in _gamesList.OrderByDescending(g => ParseTimeInfo(g.TimeInfo)))
    {
        <div class="game-item" style="background-image: url('@game.ImageUrl');">
            @if (SettingsPage.ShowGameTitle)
            {
                <div class="overlay" style="@(game.Id == _currentGameId ? _onGameStyle : _defaultStyle)"></div>
                <div class="game-info">
                    <h3 style="word-wrap: break-word; text-align: left; font-size: 20px; max-height: 45px">@game.Title</h3>
                </div>
            }
            else
            {
                <div class="overlay2" style="@(game.Id == _currentGameId ? _onGameStyle : _defaultStyle)"></div>
            }
            
            <div class="labelContainer">
                <label class="playtime-label"><i class="fa-regular fa-clock"></i> @game.TimeInfo</label>
                @if (!string.IsNullOrEmpty(game.LastRun))
                {
                    <label class="playtime-label">
                        <i class="fa-solid fa-calendar-days"></i>
                        @(DateTime.Parse(game.LastRun).ToString("dd/MM/yyyy").Replace(".", "/"))
                    </label>   
                }
                @if (GamesMonitor.GameIsDeletedFromDesktop(game))
                {
                    <label class="playtime-label"><i class="fa-solid fa-triangle-exclamation"></i> Archived game</label>
                }
            </div>
            
            <div class="button-container">
                @if (_currentGameId != game.Id)
                {
                    @if (!GamesMonitor.GameIsDeletedFromDesktop(game))
                    {
                        <button class="fa fa-play" id="play-btn" @onclick="() => StartGame(game.Location, game)"></button>   
                    }
                }
                <button class="pencil" id="edit-btn" @onclick="() => ShowEditPanel(game.Id)"><i class="fa-solid fa-gear"></i></button>
                <button class="trash" id="delete-btn" @onclick="() => DeleteGame(game)"><i class="fa-solid fa-trash-can"></i></button>
            </div>
        </div>

        @if (_currentEditGameId == game.Id)
        {
            <div class="edit-game-form">
                <label>Title:</label>
                <input type="text" @bind="game.Title" placeholder="Edit title" required="required">
                <div>
                    <label>Cover:</label>
                    <input type="text"  style="width: 88%" @bind="game.ImageUrl" placeholder="Edit cover url" required="required">
                    <button class="edit-game-form-button" style="width: 45px" @onclick="() => OpenUrl(SteamGridDB._link)"><i class="fa-solid fa-globe"></i></button>
                </div>
                <div>
                    <label>Location:</label>
                    <input style="width: 80%" type="text" @bind="game.Location" placeholder="Edit location" required="required">
                    <button class="edit-game-form-button" style="width: 45px;"
                            @onclick="() => SelectFileForEdit(game)">
                        <i class="fa-solid fa-pencil"></i>
                    </button>
                    <button class="edit-game-form-button" style="width: 45px"
                            disabled="@(!File.Exists(game.Location) || string.IsNullOrEmpty(game.Location))"
                            @onclick="() => OpenFolder(game.Location)">
                        <i class="fa-regular fa-folder-open"></i>
                    </button>
                </div>
                <label>Launch options:</label>
                <input type="text" @bind="game.Arguments" placeholder="Edit options" required="required">
                <button class="mainPage_saveButton" @onclick="() => SaveEdit(game.Id)"><i class="fa-solid fa-floppy-disk"></i></button>
                <button class="edit-game-form-button" @onclick="() => CancelEdit()"><i class="fa-solid fa-close"></i></button>
            </div>
        }
    }
    @if (!_gamesList.Any())
    {
        <h3 style="text-align: center; width: 100%; color: #696a6d; font-family: 'JetBrains Mono', monospace;">Empty.</h3>
    }


    @if (_showAddGameForm)
    {
        <div id="add-game-form" class="add-game-form">
            <input type="text" @bind="_newGame.Title" placeholder="Title (English)" required="required">
            <div class="custom-file-input">
                <label class="custom-file-label" @onclick="@SelectFile" for="fileInput">@(_selectedFile != null ? _selectedFile : "Select \".exe\" file")</label>
            </div>
            <button @onclick="AddGameAsync" ><i class="fa-solid fa-add"></i></button>
            <button @onclick="ToggleForm"><i class="fa-solid fa-close"></i></button>

        </div>
    }

    @if (!_showAddGameForm && SettingsPage.ShowAddButton)
    {
        <button class="add-game-button fa fa-plus" @onclick="ToggleForm"></button>
    }

</div>
@code {
    private int? _currentEditGameId = null;
    private static string _errorText;
    public static List<GameModel> _gamesList = GameData.GamesData.ParseGamesFromJSON().ToList();
    static bool _showAddGameForm = false;
    static GameModel _newGame = new GameModel();
    private static string _selectedFile;
    private int previousGameId = -1;
    static bool _playerPlaying = false;
    private int _currentGameId = -1;
    static string _defaultStyle = "";
    static string _onGameStyle = "border: 2px solid #238636;";
    static Logger _logger = new Logger();
    
    public static TimeSpan ParseTimeInfo(string timeInfo)
    {
        if (string.IsNullOrWhiteSpace(timeInfo))
        {
            return TimeSpan.Zero;
        }

        timeInfo = timeInfo.Trim();
    
        int hours = 0;
        int minutes = 0;

        var hourMatch = Regex.Match(timeInfo, @"(\d+)h");
        if (hourMatch.Success)
        {
            hours = int.Parse(hourMatch.Groups[1].Value);
        }

        var minuteMatch = Regex.Match(timeInfo, @"(\d+)m");
        if (minuteMatch.Success)
        {
            minutes = int.Parse(minuteMatch.Groups[1].Value);
        }

        return new TimeSpan(hours, minutes, 0);
    }

    private static void SelectFileForEdit(GameModel game)
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            var _prevLocation = game.Location;
            openFileDialog.Filter = "Executable files (*.exe)|*.exe|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = openFileDialog.FileName;
                game.Location = fullPath;
            }
            else
            {
                game.Location = _prevLocation;
            }
        }
    }
    
    private static void SelectFile()
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            openFileDialog.Filter = "Executable files (*.exe)|*.exe|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = openFileDialog.FileName;
                _selectedFile = fullPath;
                _newGame.Location = fullPath;
            }
            else
            {
                _selectedFile = null;
            }
        }
    }

    public static void OpenUrl(string url) => Process.Start("explorer", url);

    public static void OpenFolder(string path)
    {
        if (File.Exists(path))
        {
            Process.Start("explorer.exe", $"/select,{path.Replace("/", @"\")}");
        }
        else
        {
            MessageBox.Show("File does not exist", "Error");
        }
    }

    private void ShowEditPanel(int gameId)
    {
        _currentEditGameId = gameId;
    }

    private void SaveEdit(int gameId)
    {
        var game = _gamesList.FirstOrDefault(g => g.Id == gameId);
        if (game != null)
        {
            GameData.GamesData.SaveToJSON(_gamesList);
        }

        _currentEditGameId = null;
    }

    private void CancelEdit()
    {
        _currentEditGameId = null;
    }

    private void StartGame(string _path, GameModel game)
    {
        try
        {
            Process firstProc = new Process();
            firstProc.StartInfo.FileName = _path;
            if (!string.IsNullOrEmpty(game.Arguments)) firstProc.StartInfo.Arguments = game.Arguments;
            firstProc.StartInfo.WorkingDirectory = Path.GetDirectoryName(_path);
            firstProc.EnableRaisingEvents = true;
            firstProc.Start();
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message);
        }
    }

    static void ToggleForm() => _showAddGameForm = !_showAddGameForm;

    public static async void AddGameAsync()
    {
        int _id = _gamesList.Any() ? _gamesList.Max(g => g.Id) + 1 : 1;
        if (!string.IsNullOrEmpty(_selectedFile))
        {
            try
            {
                _gamesList.Add(new GameModel()
                {
                    Id = _id,
                    ImageUrl = await SteamGridDB.GetGridUri(_newGame.Title),
                    Location = _newGame.Location,
                    TimeInfo = "0h 0m",
                    Title = _newGame.Title
                });
                _newGame = new GameModel();
                _showAddGameForm = false;
                _selectedFile = null;
                await GameData.GamesData.SaveToJSON(_gamesList);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, "Error");
            }
        }
    }

    public static async void AddGameFromAnotherAsync(int _id, string _location, string _gameName)
    {
        try
        {
            _gamesList.Add(new GameModel()
            {
                Id = _id,
                ImageUrl = await SteamGridDB.GetGridUri(_gameName),
                Location = _location,
                TimeInfo = "0h 0m",
                Title = _gameName.Replace("&#8211;", "-")
                    .Replace("&#038;", "&")
                    .Replace("&#8217;", "`")
            });
            _newGame = new GameModel();
            _showAddGameForm = false;
            _selectedFile = null;
            await GameData.GamesData.SaveToJSON(_gamesList);
        }
        catch (Exception e)
        {
            MessageBox.Show(e.Message, "Error");
        }
    }


    private void DeleteGame(GameModel gameToRemove)
    {
        if (MessageBox.Show("Are you sure you want to remove the game from list?", "Question", MessageBoxButtons.YesNo) == DialogResult.Yes)
        {
            _gamesList.Remove(gameToRemove);
            GameData.GamesData.SaveToJSON(_gamesList);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAsync();
    }
    
    private async Task UpdateAsync()
    {
        GameModel _currentRunningGame = null;
        var delay = 10000;
        while (true)
        {
            try
            {
                var _game = GamesMonitor.GameFromListIsRunning(_gamesList);
                if (_game.runningGame != null && _game.isRunning)
                {
                    if (_currentRunningGame == null || _currentRunningGame.Id != _game.runningGame.Id)
                    {
                        _logger.Log(Logger.LogType.DEBUG, $"{_game.runningGame.Title} running");
                        _currentRunningGame = _game.runningGame;
                        _currentGameId = _game.runningGame.Id;
                        
                        _game.runningGame.LastRun = DateTime.Now.ToString("dd/MM/yyyy");
                        
                        if (!GamesMonitor.isCounting)
                        {
                            GamesMonitor.isCounting = true;
                            _ = Task.Run(() => GamesMonitor.CountPlayTime(_gamesList, _game.runningGame.Location));
                        }
                        delay = 3000;
                    }
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    if (_currentRunningGame != null)
                    {
                        _logger.Log(Logger.LogType.DEBUG, $"Game closed");
                        _currentGameId = -1;
                        _currentRunningGame = null;

                        GamesMonitor.isCounting = false;
                        
                        if (SettingsPage.AutoBackup) await Backup.MakeBackupAsync();
                        await InvokeAsync(StateHasChanged);
                        delay = 10000;
                    }
                    await InvokeAsync(StateHasChanged);
                }

                await Task.Delay(delay);
            }
            catch (Exception ex)
            {
                _logger.Log(Logger.LogType.ERROR, $"Error in UpdateAsync: {ex.Message}");
                throw;
            }
        }
    }
    
}