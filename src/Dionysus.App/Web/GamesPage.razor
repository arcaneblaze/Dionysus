@page "/games"

@using System.Collections
@using System.Diagnostics
@using Dionysus.App.Data
@using Dionysus.App.Interfaces
@using Dionysus.WebScrap
@using Dionysus.WebScrap.GOGScrapper
@using Dionysus.WebScrap.XatabScrapper
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<link href="https://fonts.cdnfonts.com/css/cascadia-code" rel="stylesheet">

<!--style block-->
<style>
    .findPanel {
        font-family: 'Cascadia Code', sans-serif;
        user-select: none;
        background-color: #1b1b1b;
        color: white;
        -ms-overflow-style: none;
        scrollbar-width: none;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        text-align: center;
    }
    a, .btn-link {
        color: #0071c1;
    }
    .butt {
        background-color: #151515;
        color: #fff;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        padding: 8px 20px;
        height: 35px;
        font-size: 12px;
        cursor: pointer;
        text-align: center;
        transition: background-color 0.3s, transform 0.3s;
    }
    .butt:hover{
        background-color: #555;
        transform: scale(1.05);
        cursor: pointer;
    }
    .butt:active{
        transform: scale(0.97);
    }
    input {
        font-family: 'Cascadia Code', sans-serif;
        width: 70%;
        padding: 10px;
        margin-right: 10px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        background-color: #151515;
        color: #fff;
    }
    input:focus {
        outline: none;
    }
    .game-list {
        max-width: 900px;
        font-family: 'Cascadia Code', sans-serif;
        margin: 0 auto;
        user-select: none;
        background-color: #1b1b1b;
        color: white;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    .game-item {
        aspect-ratio: 16/9;
        height: auto;
        min-height: 200px;
        max-height: 250px;
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: flex-start;
        background-color: #131313;
        border-radius: 10px;
        border: 0.2px solid #323232;
        padding-left: 15px;
        padding-bottom: 10px;
        margin-top: 10px;
        position: relative;
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    }
    .game-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.7);
    }
    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(0deg, rgba(19,19,19,1) 0%, rgba(19,19,19,0.896796218487395) 39%, rgba(0,212,255,0) 100%);
        border-radius: 8px;
        z-index: 1;
    }
    .game-info {
        font-family: 'Cascadia Code', sans-serif;
        z-index: 2;
        color: white;
        font-size: 1.1em;
        margin-bottom: 5px;
    }
    img {
        user-drag: none;
        -webkit-user-drag: none;
        -moz-user-select: none;
    }
    .linkText  {
        display: inline-block;
        width: auto;
        font-size: 14px;
        background-color: #191919;
        padding: 8px 12px;
        height: 15px;
        border-radius: 10px;
        text-align: center;
        margin-right: 10px;
    }
    h3{
        font-family: 'Cascadia Code', sans-serif;
        text-align: center;
        width: 100%;
    }
    .labelContainer {
        position: absolute;
        top: 10px;
        left: 10px;
        display: flex;
        align-items: center;
    }
    .sizeLabel {
        font-size: 14px;
        font-weight: normal;
        color: #ffffff;
        background-color: #191919;
        padding: 8px 12px;
        border-radius: 10px;
        display: inline-block;
        margin-right: 10px;
    }

    .buttLink{
        font-size: 13px;
        font-weight: normal;
        color: #fff;
        border-radius: 10px;
        border-style: none;
        background-color: #191919;
        padding: 8px 12px;
        height: 31px;
        display: inline-block;
        margin-right: 10px;
        transition: all 0.2s ease-in-out;
    }
    .buttLink:hover{
        background-color: #151515;
        transform: scale(1.05);
        cursor: pointer;
    }
    .buttLink:active{
        transform: scale(0.97);
    }



    .loader-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .loader {
        height: 25px;
        aspect-ratio: 1;
        border: 3px solid #323232;
        animation: l4 2s infinite;
    }
    @@keyframes l4 {
        0%  {aspect-ratio:1;border-radius:50px}
        25% {aspect-ratio:2;border-radius:50px}
        50% {aspect-ratio:2;border-radius:0}
        75% {aspect-ratio:1;border-radius:0}
        100%{aspect-ratio:1;border-radius:50px}
    }

</style>


<h3 >Search games:</h3>
<div class="findPanel">
    <input @bind="searchText" placeholder="Type game name..."/>

    <button @onclick="Search" class="butt fa fa-magnifying-glass"></button>
</div>

@if (!string.IsNullOrWhiteSpace(_errorText))
{
   
    @if (_errorText == "Wait...")
    {
        <div class="loader-container">
            <div class="loader"></div>
        </div>
    }
    else
    {
        <h3 style="text-align: center; width: 100%; color: #323232">@_errorText</h3>
    }
}
<div class="game-list">
    @if (_games != null && _games.Any())
    {
        @foreach (var game in _games)
        {
            @if (!string.IsNullOrEmpty(game.Size))
            {
                <div class="game-item" style="background-image: url('@game.Cover');">
                    <div class="overlay"></div>
                    <div class="game-info">
                        <h3 style="word-wrap: break-word; text-align: left; font-size: 20px; max-height: 45px">
                            @game.Name
                        </h3>


                        <div class="button-group">
                            <button class="butt fa fa-download" title="Download" @onclick="() => DownloadTypeSelector(game.Link, game.DownloadLink, game.Name)"></button>
                            <button class="butt fa fa-plus" title="Add to library" @onclick="() => AddGameToLib(game.Name)"></button>
                        </div>
                        <div class="labelContainer">
                            <label class="sizeLabel">@game.Size</label>
                            <label class="linkText">@game.Source</label>
                            @if (!string.IsNullOrEmpty(game.Uploader))
                            {
                                <label class="linkText" title="Uploader">@game.Uploader</label>
                            }
                            @if (!string.IsNullOrEmpty(game.Version) && SettingsPage.ShowGameVersion)
                            {
                                <label class="linkText" title="Version">@game.Version</label>
                            }
                            @if (SettingsPage.ShowLinkButton)
                            {
                                <button class="buttLink fa-brands fa-firefox-browser" @onclick="() => Process.Start(new ProcessStartInfo(game.Link) { UseShellExecute = true })"></button>   
                            }
                        </div>
                    </div>
                </div>   
            }
        }
    }
</div>

@code {
    private static string _jsonPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "env.json");
    private static string _selectedFile;
    private static string _errorText;
    private static string searchText;
    private static bool _research = false;
    private static IEnumerable<SearchGameInfoStruct> _games;
    private List<IGameSearcher> _searchers = new List<IGameSearcher>
    {
        new GOGSearcher(),
        new XatabSearcher()
    };
    
    private void DownloadTypeSelector(string _gameLink, string _downloadLink, string _title)
    {
        if (_downloadLink.StartsWith("magnet:")) OpenTorrentByMagnet(_downloadLink);
        else DownloadTorrentFile(_gameLink);
    } 
    
    public static void OpenTorrentByMagnet(string _magnet)
    {
        var _startInfo = new ProcessStartInfo
        {
            FileName = _magnet,
            UseShellExecute = true
        };

        Process.Start(_startInfo);
    }

    private async Task Search()
    {
        var foundGames = new List<SearchGameInfoStruct>();
        var alreadyFoundGameNames = new HashSet<string>();
        _games = null;
        _errorText = "Wait...";
        StateHasChanged();

        var searchTasks = _searchers.Select(async searcher =>
        {
            try
            {
                var startTime = DateTime.Now;
                Console.WriteLine($"[DEBUG] Searcher {searcher.SourceName} started at {startTime}");
                var searchResults = await searcher.Search(searchText);
                var endTime = DateTime.Now;
                Console.WriteLine($"[DEBUG] Searcher {searcher.SourceName} finished at {endTime}. Duration: {(endTime - startTime).TotalSeconds} seconds");
                if (searchResults != null && searchResults.Any())
                {
                    foreach (var game in searchResults)
                    {
                        if (!alreadyFoundGameNames.Contains(game.Name))
                        {
                            var tempGame = game;
                            tempGame.Source = searcher.SourceName;
                            foundGames.Add(tempGame);
                            alreadyFoundGameNames.Add(game.Name);
                        }
                    }

                    if (foundGames.Any())
                    {
                        _games = new List<SearchGameInfoStruct>(foundGames);
                        StateHasChanged();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in searcher {searcher.SourceName}: {ex.Message}");
            }
        }).ToList();
        await Task.WhenAll(searchTasks);

        _errorText = foundGames.Any() ? string.Empty : "Not Found.";

        StateHasChanged();
        
        GC.Collect();
        GC.WaitForPendingFinalizers();
        
        foundGames.Clear();
        alreadyFoundGameNames.Clear();
    }

    private async void AddGameToLib(string _gameName)
    {
        var _json = GameData.GamesData.ParseGamesFromJSON();
        SelectFile();
        if (!string.IsNullOrEmpty(_selectedFile))
        {
            try
            {
                var _lastId = _json.Any() ? _json.Select(id => id.Id).Last() : 0;

                MainPage.AddGameFromAnotherAsync(_lastId + 1, _selectedFile, _gameName);
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex);
            }   
        }
    }
    
    private void SelectFile()
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            openFileDialog.Filter = "Executable files (*.exe)|*.exe|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                _selectedFile = openFileDialog.FileName;
            }
        }
    }
    
    private async void DownloadTorrentFile(string url)
    {
        XatabDownloader.DonwloadFile(url);
    }
    
    public static void OpenTorrentFile(string path)
    {
        using Process fileopener = new Process();

        fileopener.StartInfo.FileName = "C:\\Program Files\\qBittorrent\\qbittorrent.exe";
        fileopener.StartInfo.Arguments = $"\"{path}\"";
        fileopener.StartInfo.UseShellExecute = true;
        fileopener.Start();
    }
}
