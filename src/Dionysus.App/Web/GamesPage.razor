@page "/games"

@using System.Collections
@using System.Diagnostics
@using Dionysus.App.Data
@using Dionysus.App.Helpers
@using Dionysus.App.Interfaces
@using Dionysus.App.Logger
@using Dionysus.App.Models
@using Dionysus.App.TorrentClient
@using Dionysus.WebScrap
@using Dionysus.WebScrap.FitGirlScrapper
@using Dionysus.WebScrap.GOGScrapper
@using Dionysus.WebScrap.XatabScrapper
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
<link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet">
<link href="https://fonts.cdnfonts.com/css/cascadia-code" rel="stylesheet">

<div class="gamesPage_searchPanel">
    <input class="gamesPage_input" @bind="searchText" placeholder="Type game name..."/>

    <button @onclick="Search" class="gamesPage_searchButton fa fa-magnifying-glass"></button>
</div>

@if (!string.IsNullOrWhiteSpace(_errorText))
{
   
    @if (_errorText == "Wait...")
    {
        <div class="gamesPage_loader-container">
            <div class="gamesPage_loaderAnimation"></div>
        </div>
    }
    else
    {
        <h3 class="gamesPage_errorText">@_errorText</h3>
    }
}
<div class="game-list">
    @if (_games != null && _games.Any())
    {
        @foreach (var game in _games.OrderBy(g => g.Source))
        {
            @if (!string.IsNullOrEmpty(game.Size))
            {
                <div class="gamesPage_game-item" style="background-image: url('@game.Cover');">
                    <div class="gamesPage_overlay"></div>
                    <div class="gamesPage_game-info">
                        <h3 class="gamesPage_gameName">
                            @game.Name
                        </h3>


                        <div class="gamesPage_topRightContainer">
                            <button class="gamesPage_button fa fa-download" title="Download" @onclick="() => TorrentManager.DownloadTypeSelector(game.Link, game.DownloadLink, game.Name)"></button>
                            <button class="gamesPage_button fa fa-plus" title="Add to library" @onclick="() => AddGameToLib(game.Name)"></button>
                        </div>
                        <div class="gamesPage_topLeftContainer">
                            <label class="gamesPage_topLeftContainerFirstElement"><i class="fa-regular fa-file-zipper"></i> @game.Size</label>
                            <label class="gamesPage_topLeftContainerSecondElement"><i class="fa-solid fa-user"></i> @game.Source</label>
                            @if (!string.IsNullOrEmpty(game.Uploader))
                            {
                                <label class="gamesPage_topLeftContainerSecondElement" title="Uploader"><i class="fa-solid fa-upload"></i> @game.Uploader</label>
                            }
                            @if (!string.IsNullOrEmpty(game.Version) && SettingsPage.ShowGameVersion)
                            {
                                <label class="gamesPage_topLeftContainerSecondElement" title="Version"><i class="fa-solid fa-circle-info"></i> @game.Version</label>
                            }
                            @if (!string.IsNullOrEmpty(game.Date) && SettingsPage.ShowPostDate)
                            {
                                <label class="gamesPage_topLeftContainerSecondElement"><i class="fa-solid fa-calendar-days"></i> @game.Date</label>
                            }
                            @if (SettingsPage.ShowLinkButton)
                            {
                                <button class="gamesPage_topLeftContainerButtonElement fa-brands fa-chrome"
                                        @onclick="() => Process.Start(new ProcessStartInfo(game.Link) { UseShellExecute = true })">
                                </button>  
                            }
                        </div>
                    </div>
                </div>   
            }
        }
    }
</div>

@code {
    private static string _jsonPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "env.json");
    private static string _selectedFile;
    private static string _errorText;
    private static string searchText;
    private static bool _research = false;
    private static IEnumerable<SearchGameInfoStruct> _games;
    static Logger _logger = new Logger();
    private List<IGameSearcher> _searchers = new List<IGameSearcher>
    {
        new GOGSearcher(),
        new XatabSearcher(),
        new FitGirlSearcher()
    };
    
    private async Task Search()
    {
        var foundGames = new List<SearchGameInfoStruct>();
        var alreadyFoundGameNames = new HashSet<string>();
        _games = null;
        _errorText = "Wait...";
        StateHasChanged();
        
        var searchTasks = _searchers.Select(async searcher =>
        {
            try
            {
                var startTime = DateTime.Now;
                _logger.Log(Logger.LogType.DEBUG, $"Searcher {searcher.SourceName} started at {startTime}");
                var searchResults = await searcher.Search(searchText);
                var endTime = DateTime.Now;
                _logger.Log(Logger.LogType.DEBUG, $" Searcher {searcher.SourceName} finished at {endTime}. Duration: {(endTime - startTime).TotalSeconds} seconds");
                if (searchResults != null && searchResults.Any())
                {
                    foreach (var game in searchResults)
                    {
                        if (!alreadyFoundGameNames.Contains(game.Name))
                        {
                            var tempGame = game;
                            tempGame.Source = searcher.SourceName;
                            foundGames.Add(tempGame);
                            alreadyFoundGameNames.Add(game.Name);
                        }
                    }

                    if (foundGames.Any())
                    {
                        _games = new List<SearchGameInfoStruct>(foundGames);
                        StateHasChanged();
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.Log(Logger.LogType.ERROR, $"Error in searcher {searcher.SourceName}: {ex.Message}");
            }
        }).ToList();
        await Task.WhenAll(searchTasks);

        _errorText = foundGames.Any() ? string.Empty : "Not Found.";

        StateHasChanged();
        
        GC.Collect();
        GC.WaitForPendingFinalizers();
        
        foundGames.Clear();
        alreadyFoundGameNames.Clear();
    }

    private async void AddGameToLib(string _gameName)
    {
        var _json = GameData.GamesData.ParseGamesFromJSON();
        SelectFile();
        if (!string.IsNullOrEmpty(_selectedFile))
        {
            try
            {
                var _lastId = _json.Any() ? _json.Select(id => id.Id).Last() : 0;

                MainPage.AddGameFromAnotherAsync(_lastId + 1, _selectedFile, _gameName);
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex);
            }   
        }
    }
    
    private void SelectFile()
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            openFileDialog.Filter = "Executable files (*.exe)|*.exe|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                _selectedFile = openFileDialog.FileName;
            }
        }
    }
    
   
}
