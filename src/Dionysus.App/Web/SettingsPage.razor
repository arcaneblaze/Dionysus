@page "/settings"
@using System.Reflection
@using Dionysus.App
@using Dionysus.App.Data
@using Dionysus.App.Helpers
@using Dionysus.App.Logger
@using Dionysus.App.Models
@using Dionysus.WebScrap.FitGirlScrapper
@using Dionysus.WebScrap.GOGScrapper
@using Dionysus.WebScrap.XatabScrapper
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.VisualBasic
@using Microsoft.VisualBasic.ApplicationServices

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<link href="https://fonts.cdnfonts.com/css/cascadia-code" rel="stylesheet">

<style>
    @@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap');
    html, body {
        padding: 100px;
        margin: 0 auto;
        user-select: none;
        background-color: #0d1117;
        color: white;
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .panell {
        max-width: 900px;
        text-align: center;
        justify-content: center;
        display: flex;
        margin: 0 auto;
        flex-direction: column;
        padding: 0 30px 30px 30px;
    }

    .settingLabel {
        font-family: "JetBrains Mono", monospace;
        font-size: 14px;
        color: #c6cdd5;
        background-color: #161b22;
        padding: 16px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        border: 1px solid #323232;
    }

    .settingLabel span {
        flex-grow: 1;
        text-align: left;
    }
    
    .custom-checkbox {
        display: inline-block;
        width: 16px;
        height: 16px;
        border-radius: 10px;
        background-color: #21262d;
        border: 2px solid #323232;
        position: relative;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        cursor: pointer;
        transition: background-color 0.3s ease, border-color 0.3s ease;
    }

    .custom-checkbox.checked {
        background-color: #77bdfb;
        border-color: #77bdfb;
    }

    .custom-checkbox::after {
        content: '\f00c';
        font-family: 'FontAwesome';
        font-size: 14px;
        color: #0d1117;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .custom-checkbox.checked::after {
        opacity: 1;
    }

    .saveButton {
        font-family: "JetBrains Mono", monospace;
        background-color: #238636;
        color: #c6cdd5;
        max-width: 900px;
        padding: 10px;
        border-radius: 20px;
        border-style: solid;
        border-color: #32362d;
        border-width: 0.2px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
    }

    .saveButton:hover {
        background-color: #127525;
        transform: scale(1.01);
    }

    .saveButton:active{
        transform: scale(0.99);
    }
    .versionLabel{
        font-family: "JetBrains Mono", monospace;
        margin-top: 10px;
        font-size: 14px;
        color: #89929b;
        opacity: 0.4;
    }

    .testButton {
        font-family: "JetBrains Mono", monospace;
        background-color: #161b22;
        color: #c6cdd5;
        padding: 10px;
        border-radius: 20px;
        border-style: solid;
        border-color: #32362d;
        border-width: 0.2px;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        width: 100%;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    }

    .testButton:hover {
        background-color: #0d1117;
        transform: scale(1.01);
    }
    .testButton.input:focus{
        outline: #32362d 0.3px solid;
    }
    .testButton.input:hover{
        transform: scale(1);
        cursor: text;
    }

    .testButton:active {
        transform: scale(0.99);
    }


    .separator {
        font-family: "JetBrains Mono", monospace;
        font-size: 14px;
        width: 100%;
        max-width: 200px;
        color: #c6cdd5;
        padding: 5px;
        background-color: #161b22;
        height: auto;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        margin: 0 auto 20px;
        border-radius: 20px;
        border: 1px solid #323232;
    }



</style>

<h3 style="text-align: center; width: 100%; height:auto; font-family: 'JetBrains Mono', monospace;color:  #c6cdd5;">Settings:</h3>
<div class="panell">
    <label class="settingLabel">
        <span>
            Sources:<br/><br/>
            GOG - <i class="@GOGStatus" style="color: @(GOGStatus.Contains("circle-check") ? "#7ce38b" : "#fa7970")"></i><br/>
            Xatab - <i class="@XatabStatus" style="color: @(XatabStatus.Contains("circle-check") ? "#7ce38b" : "#fa7970")"></i><br/>
            FitGirl - <i class="@FitGirlStatus" style="color: @(FitGirlStatus.Contains("circle-check") ? "#7ce38b" : "#fa7970")"></i>
        </span>
    </label>
    <div class="separator">Profile</div>
    <div class="settingLabel" style="flex-direction: column">
        <span>Image:</span><br/>
        <button class="testButton" style="width: 48%; font-size: 13px" @onclick="@ProfileData.SelectImage">
            <i class="fa-solid fa-image"></i> Select image
        </button><br/>
        <span>Username:</span><br/>
        <input class="testButton input" style="width: 48%; text-align: center; font-size: 13px" @bind="@ProfileData.Profile().Username"
               placeholder="Type username...">
    </div>
    <div class="separator">Application</div>
    <label class="settingLabel">
        <span>Add to startup</span>
        <div class="custom-checkbox @(AddToStartup ? "checked" : "")" @onclick="ToggleAddToStartup"></div>
    </label>
    <div class="separator">Library</div>
    <label class="settingLabel">
        <span>Show "+" button</span>
        <div class="custom-checkbox @(ShowAddButton ? "checked" : "")" @onclick="ToggleShowAddButton"></div>
    </label>
    <label class="settingLabel">
        <span>Show game title</span>
        <div class="custom-checkbox @(ShowGameTitle ? "checked" : "")" @onclick="ToggleShowGameTitle"></div>
    </label>

    <label class="settingLabel">
        <span>Auto-backup</span>
        <div class="custom-checkbox @(AutoBackup ? "checked" : "")" @onclick="ToggleAutobackup"></div>
    </label>

    <div class="settingLabel">
        <div style="width: 100%; display: flex; justify-content: space-between;">
            <button class="testButton" style="width: 48%" @onclick="MakeBackup"><i class="fa-solid fa-folder-plus"></i> Make backup</button>
            @if (File.Exists(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data/games.json.bak")))
            {
                <button class="testButton" style="width: 48%" @onclick="RestoreBackup"><i class="fa-solid fa-clock-rotate-left"></i> Restore backup</button>
            }
        </div>
    </div>

    <div class="separator">Torrent</div>
    <label class="settingLabel">
        <span>Show link to the page of the selected game</span>
        <div class="custom-checkbox @(ShowLinkButton ? "checked" : "")" @onclick="ToggleShowLinkButton"></div>
    </label>
    <label class="settingLabel">
        <span>Show game version (not all repacks are being worked on)</span>
        <div class="custom-checkbox @(ShowGameVersion ? "checked" : "")" @onclick="ToggleShowGameVersion"></div>
    </label>
    <label class="settingLabel">
        <span>Show torrent post date (gog not working)</span>
        <div class="custom-checkbox @(ShowPostDate ? "checked" : "")" @onclick="ToggleShowPostDate"></div>
    </label>
    <label class="settingLabel">
        <span>Avoid converting the torrent file to a magnet link</span>
        <div class="custom-checkbox @(AvoidConvertToMagnet ? "checked" : "")" @onclick="ToggleAvoidConvertToMagnet"></div>
    </label>

    <button class="saveButton" @onclick="Save"><i class="fa-solid fa-floppy-disk"></i></button>
    <label class="versionLabel">v@_versionString
    </label>
</div>

@code {
    public static string Username;
    
    public static bool AddToStartup;
    public static bool ShowAddButton;
    public static bool ShowGameTitle;
    public static bool AutoBackup;
    public static bool ShowLinkButton;
    public static bool ShowGameVersion;
    public static bool ShowPostDate;
    public static bool AvoidConvertToMagnet;
    static Version _version = Assembly.GetExecutingAssembly().GetName().Version;
    static string _versionString = $"{_version.Major}.{_version.Minor} \"{Program._appCodeName}\"";
    static Logger _logger = new Logger();
    
    private string GOGStatus = "fa-solid fa-hourglass-start";
    private string XatabStatus = "fa-solid fa-hourglass-start";
    private string FitGirlStatus = "fa-solid fa-hourglass-start";
    
    protected override async Task OnInitializedAsync()
    {
        GOGStatus = await GOG.GetStatus() ? "fa-solid fa-circle-check" : "fa-solid fa-circle-xmark";
        XatabStatus = await Xatab.GetStatus() ? "fa-solid fa-circle-check" : "fa-solid fa-circle-xmark";
        FitGirlStatus = await FitGirl.GetStatus() ? "fa-solid fa-circle-check" : "fa-solid fa-circle-xmark";
    }
    
    private static async Task MakeBackup()
    {
        await Backup.MakeBackupAsync();
    }
    private static async Task RestoreBackup()
    {
        await Backup.ReadBackupAsync();
    }
    
    public static async Task InitializeSettings()
    {
        var settings = await SettingsData.LoadFromJSON();
        var addToStartup = settings.FirstOrDefault(s => s.SettingName == "AddToStartup");
        AddToStartup = addToStartup?.Value ?? false;
        var addButt = settings.FirstOrDefault(s => s.SettingName == "ShowAddButton");
        ShowAddButton = addButt?.Value ?? true;
        var gameTitle = settings.FirstOrDefault(s => s.SettingName == "ShowGameTitle");
        ShowGameTitle = gameTitle?.Value ?? true;
        var autobackup = settings.FirstOrDefault(s => s.SettingName == "AutoBackup");
        AutoBackup = autobackup?.Value ?? true;
        var linkButt = settings.FirstOrDefault(s => s.SettingName == "ShowLinkButton");
        ShowLinkButton = linkButt?.Value ?? false;
        var versionInfo = settings.FirstOrDefault(s => s.SettingName == "ShowGameVersion");
        ShowGameVersion = versionInfo?.Value ?? false;
        var avoidConvertToMagnet = settings.FirstOrDefault(s => s.SettingName == "AvoidConvertToMagnet");
        AvoidConvertToMagnet = avoidConvertToMagnet?.Value ?? false;
        var showPostDate = settings.FirstOrDefault(s => s.SettingName == "ShowPostDate");
        ShowPostDate = showPostDate?.Value ?? false;
        
        _logger.Log(Logger.LogType.DEBUG, "Settings loaded");
    }

    private void ToggleAddToStartup() => AddToStartup = !AddToStartup;
    private void ToggleShowAddButton() => ShowAddButton = !ShowAddButton;

    private void ToggleShowGameTitle() => ShowGameTitle = !ShowGameTitle;
    private void ToggleAutobackup() => AutoBackup = !AutoBackup;

    private void ToggleShowLinkButton() => ShowLinkButton = !ShowLinkButton;

    private void ToggleShowGameVersion() => ShowGameVersion = !ShowGameVersion;
    
    private void ToggleShowPostDate() => ShowPostDate = !ShowPostDate;
    
    private void ToggleAvoidConvertToMagnet() => AvoidConvertToMagnet = !AvoidConvertToMagnet;
    
    public static async Task Save()
    {
        
        ProfileData.SaveJson();
        if (AddToStartup && !AppHelper.AddedToStartup()) AppHelper.Logic(true);
        else if(!AddToStartup)  AppHelper.Logic(false);
        
        var settings = new List<SettingsModel>
        {
            new SettingsModel { SettingName = "AddToStartup", Value = AddToStartup },
            new SettingsModel { SettingName = "ShowGameTitle", Value = ShowGameTitle },
            new SettingsModel { SettingName = "ShowAddButton", Value = ShowAddButton },
            new SettingsModel { SettingName = "AutoBackup", Value = AutoBackup },
            new SettingsModel { SettingName = "ShowLinkButton", Value = ShowLinkButton },
            new SettingsModel { SettingName = "ShowGameVersion", Value = ShowGameVersion },
            new SettingsModel { SettingName = "ShowPostDate", Value = ShowPostDate },
            new SettingsModel { SettingName = "AvoidConvertToMagnet", Value = AvoidConvertToMagnet },
        };
        _logger.Log(Logger.LogType.DEBUG, "Settings saved");
        await SettingsData.SaveToJSON(settings);
    }
}