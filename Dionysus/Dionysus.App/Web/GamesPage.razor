@page "/games"

@using System.Diagnostics
@using Dionysus.App.Data
@using Dionysus.WebScrap.GOGScrapper

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-k6RqeWeci5ZR/Lv4MR0sA0FfDOMt23w54fH4YBBvaWv6zwE5aEmGZ+W2smWjq5" crossorigin="anonymous">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

<!--style block-->
<style>
    .findPanel {
        font-family: 'Roboto', sans-serif;
        user-select: none;
        background-color: #1b1b1b;
        color: white;
        -ms-overflow-style: none;
        scrollbar-width: none;
        padding-top: 10px;

        display: flex;
        justify-content: center;  
        align-items: center;
        width: 100%;
    }

    a, .btn-link {
        color: #0071c1;
    }

    .butt {
        background-color: #151515;
        color: #fff;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        padding: 8px 20px;
        height: 35px;
        font-size: 12px;
        cursor: pointer;
        text-align: center;
        transition: background-color 0.3s, transform 0.3s;
    }
    .butt:hover{
        background-color: #555;
        transform: scale(1.05);    
        cursor: pointer;
    }
    .butt:active{
        transform: scale(0.97);
    }

    input {
        width: 70%;
        padding: 10px;
        margin-right: 10px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        background-color: #151515;
        color: #fff;
    }

    input:focus {
        outline: none;
    }

    .game-list {
        max-width: 900px;
        margin: 0 auto;
        font-family: 'Roboto', sans-serif;
        user-select: none;
        background-color: #1b1b1b;
        color: white;
        padding: 30px;
        display: flex; 
        flex-direction: column; 
        gap: 15px; 
    }

    .game-item {
        aspect-ratio: 16/9;
        height: auto;
        min-height: 200px;
        max-height: 250px;
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        display: flex;
        flex-direction: column; 
        justify-content: flex-end;
        align-items: flex-start;
        background-color: #131313;
        border-radius: 10px;
        border: 0.2px solid #323232;
        padding: 10px;
        position: relative;
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    }

    .game-item:hover {
        cursor: pointer;
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.7); 
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); 
        border-radius: 8px;
        z-index: 1;
    }

    .game-info {
        z-index: 2;
        color: white;
        font-size: 1.1em;
        margin-bottom: 5px;
    }
    
</style>

<div class="findPanel">
    <input @bind="searchText" placeholder="Type game name..."/>

    <button @onclick="Search" class="butt fa fa-search"></button>
</div>

<div class="game-list">
    @if (_games != null && _games.Any())
    {
        @foreach (var game in _games)
        {
            <div class="game-item" style="background-image: url('@game.Cover');">
                <div class="overlay"></div>
                <div class="game-info">
                    <h3>@game.Name</h3>

                    <div class="button-group">
                        <button class="butt fa fa-download" @onclick="() => OpenTorrentByMagnet(game.Link)"></button>
                        <button class="butt fa fa-plus" @onclick="() => AddGameToLib(game.Link)"></button>
                    </div>
                </div>
            </div>
        }
    }
    else if (!string.IsNullOrWhiteSpace(_errorText))
    {
    <h2 style="text-align: center; width: 100%; color: #323232">@_errorText</h2>
    }
</div>

@code {
    private static string _selectedFile;
    private static string _errorText;
    private static string searchText;
    private static IEnumerable<SearchGameInfoStruct> _games;

    private async Task OpenTorrentByMagnet(string _linkToSite)
    {
        var _response = await GOG.GetLinkResponse(_linkToSite);
        var _startInfo = new ProcessStartInfo
        {
            FileName = _response.Select(x => x.DownloadLink).FirstOrDefault(),
            UseShellExecute = true 
        };

        Process.Start(_startInfo);
    }
    private async Task Search()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            try
            { 
                _errorText = "Wait...";
                _games = await GOG.GetSearchResponse(searchText);
                if (_games == null || !_games.Any())
                {
                    _errorText = "Not Found.";
                }
                else
                {
                    _errorText = string.Empty;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                _games = Enumerable.Empty<SearchGameInfoStruct>();
            }
        }
        else
        {
            _games = Enumerable.Empty<SearchGameInfoStruct>();
        }
    }

    private async Task AddGameToLib(string _link)
    {
        var _response = await GOG.GetLinkResponse(_link);
        var _gameName = _response.Select(name => name.Name).FirstOrDefault();
        var _json = GameData.GamesData.ParseGamesFromJSON();
        try
        {
            var _lastId = _json.Any() ? _json.Select(id => id.Id).Last() : 0;

            SelectFile();
            await MainPage.AddGameFromAnotherAsync(_lastId + 1, _selectedFile, _gameName);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    
    private void SelectFile()
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            openFileDialog.Filter = "Executable files (*.exe)|*.exe|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                _selectedFile = openFileDialog.FileName;
            }
        }
    }
}
