@page "/"

@using System.Diagnostics
@using craftersmine.SteamGridDBNet
@using Dionysus.App.Data
@using Dionysus.App.Helpers
@using Dionysus.App.Models
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-k6RqeWeci5ZR/Lv4MR0sA0FfDOMt23w54fH4YBBvaWv6zwE5aEmGZ+W2smWjq5" crossorigin="anonymous">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<link href="https://fonts.cdnfonts.com/css/cascadia-code" rel="stylesheet">

<!--style block-->
<style>
    html, body {
        padding: 100px;
        margin: 0 auto;
        user-select: none;
        background-color: #151515;
        color: white;
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    img {
        pointer-events: none;
    }
    h1:focus {
        outline: none;
    }

    a, .btn-link {
        color: #0071c1;
    }

    .game-list {
        font-family: 'Cascadia Code', sans-serif;
        max-width: 900px;
        margin: 0 auto;
        user-select: none;
        background-color: #1b1b1b;
        color: white;
        padding: 30px;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    .game-item {
        aspect-ratio: 16/9;
        height: auto;
        min-height: 200px;
        max-height: 250px;
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        align-items: flex-start;
        background-color: #131313;
        border-radius: 10px;
        border: 0.2px solid #323232;
        padding: 10px;
        position: relative;
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    }

    .game-item:hover {
        cursor: pointer;
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.7);
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(0deg, rgba(19,19,19,1) 0%, rgba(19,19,19,0.896796218487395) 39%, rgba(0,212,255,0) 100%);
        border-radius: 9px;
        z-index: 1;
    }

    .game-info {
        font-family: 'Cascadia Code', sans-serif;
        z-index: 2;
        color: white;
        font-size: 1.1em;
        margin-bottom: 5px;
    }
    
    .add-game-button {
        background-color: #151515;
        color: #fff;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        padding: 12px 24px;
        font-size: 12px;
        display: block;
        margin: 20px auto;
        cursor: pointer;
        text-align: center;
        transition: background-color 0.3s, transform 0.3s;
    }

    .add-game-button:hover {
        background-color: #555;
        transform: scale(1.05);
    }

    .add-game-button:active{
        transform: scale(0.97);
    }

    .add-game-form {
        font-family: 'Cascadia Code', sans-serif;
        display: block;
        background-color: #131313;
        padding: 20px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        margin-top: 20px;
    }
    .add-game-form input, .add-game-form textarea {
        font-family: 'Cascadia Code', sans-serif;
        width: 97%;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        background-color: #151515;
        color: #fff;
    }
    .add-game-form button {
        font-family: 'Cascadia Code', sans-serif;
        background-color: #151515;
        color: #fff;
        width: 100px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        padding: 10px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
    }

    .add-game-form button:hover {
        background-color: #555;
        transform: scale(1.05);
    }

    .add-game-form button:active{
        transform: scale(0.97);
    }

    .button-container {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 2;
    }

    .game-item .fa-play{
        background-color: #151515;
        color: green;
        height: 30px;
        width: 30px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        font-size: 14px;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        transition: background-color 0.3s, transform 0.3s;
    }
    .game-item .fa-pencil{
        background-color: #151515;
        color: white;
        height: 30px;
        width: 30px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        font-size: 14px;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        transition: background-color 0.3s, transform 0.3s;
    }
    .game-item .fa-trash {
        background-color: #151515;
        color: red;
        height: 30px;
        width: 30px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        font-size: 14px;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
        transition: transform 0.3s, box-shadow 0.3s ease-in-out;
    }

    .game-item .fa-play:hover,
    .game-item .fa-pencil:hover,
    .game-item .fa-trash:hover {
        transform: scale(1.08);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.7);
    }

    .game-item .fa-play:active,
    .game-item .fa-pencil:active,
    .game-item .fa-trash:active {
        transform: scale(0.97);
    }
    
    .custom-file-input {
        font-family: 'Cascadia Code', sans-serif;
        position: relative;
        display: inline-block;
        width: 100%;
        height: 40px;
        margin-bottom: 10px;
    }

    .custom-file-input input[type="file"] {
        font-family: 'Cascadia Code', sans-serif;
        position: absolute;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    .custom-file-label {
        font-family: 'Cascadia Code', sans-serif;
        display: inline-block;
        width: 100%;
        height: 100%;
        line-height: 40px;
        background-color: #131313;
        text-align: center;
        color: #fff;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        cursor: pointer;
        user-select: none;
        transition: background-color 0.3s, transform 0.3s;
    }

    .custom-file-label:hover {
        background-color: #555;
        transform: scale(1.03);
    }

    .custom-file-label:active{
        transform: scale(0.97);
    }

    .edit-game-form {
        font-family: 'Cascadia Code', sans-serif;
        display: block;
        background-color: #131313;
        padding: 20px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        margin-top: 20px;
    }
    .edit-game-form input, .edit-game-form textarea {
        font-family: 'Cascadia Code', sans-serif;
        width: 97%;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        background-color: #151515;
        color: #fff;
    }
    .edit-game-form button {
        font-family: 'Cascadia Code', sans-serif;
        background-color: #151515;
        color: #fff;
        width: 100px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        padding: 10px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
    }

    .edit-game-form button:hover {
        background-color: #555;
        transform: scale(1.05);
    }

    .edit-game-form button:active{
        transform: scale(0.97);
    }

</style>
<h3 style="text-align: center; width: 100%; font-family: 'Cascadia Code', sans-serif;">Your library:</h3>
<div class="game-list">
    @foreach (var game in _gamesList)
    {
        <div class="game-item" style="background-image: url('@game.ImageUrl'); @(game.Id == _currentGameId ? _onGameStyle : _defaultStyle)">
            <div class="overlay"></div>
            <div class="game-info">
                <h3 style="word-wrap: break-word; text-align: left;">@game.Title</h3>
                <p style="color: #D3D3D3; font-family: 'Cascadia Code', sans-serif; font-size: 16px; opacity: 0.5">Play time: @game.TimeInfo</p>
            </div>
            <div class="button-container">
                <button class="fa fa-play" id="play-btn" @onclick="() => StartGame(game.Location)" title="Play"></button>
                <button class="fa fa-pencil" id="edit-btn" @onclick="() => ShowEditPanel(game.Id)" title="Edit"></button>
                <button class="fa fa-trash" id="delete-btn" @onclick="() => DeleteGame(game)" title="Delete"></button>
            </div>
        </div>
        @if (_currentEditGameId == game.Id)
        {
            <div class="edit-game-form">
                <input type="text" @bind="game.Title" placeholder="Edit Title" required="required">
                <input type="text" @bind="game.Location" placeholder="Edit Location" required="required">
                <button @onclick="() => SaveEdit(game.Id)">Save</button>
                <button @onclick="() => CancelEdit()">Cancel</button>
            </div>
        }
    }
    @if (!_gamesList.Any())
    {
        <h3 style="text-align: center; width: 100%; color: #323232; font-family: 'Cascadia Code', sans-serif;">Empty.</h3>
    }

    
    @if (_showAddGameForm)
    {
    <div id="add-game-form" class="add-game-form">
        <input type="text" @bind="_newGame.Title" placeholder="Title (Only in English)" required="required">
        <div class="custom-file-input">
            <label class="custom-file-label" @onclick="@SelectFile" for="fileInput">@(_selectedFile != null ? _selectedFile : "Choose .exe file")</label>
        </div>
        <button @onclick="AddGameAsync">Add</button> <button @onclick="ToggleForm">Close</button>

    </div>
    }

    @if (!_showAddGameForm)
    {
        <button class="add-game-button fa fa-plus" @onclick="ToggleForm"></button>
    }

</div>
@code {
    private static string _jsonPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "env.json");
    private int? _currentEditGameId = null;
    private static string _errorText;
    private static JObject configJson = (JObject)JsonConvert.DeserializeObject(System.IO.File.ReadAllText(_jsonPath));
    private static string steamGDBAPI = configJson["steamGDBAPI"].Value<string>();
    static SteamGridDb _steamGridDb = new SteamGridDb(steamGDBAPI);
    static List<GameModel> _gamesList = GameData.GamesData.ParseGamesFromJSON().ToList();
    static bool _showAddGameForm = false;
    static GameModel _newGame = new GameModel();
    private static string _selectedFile;

    static bool _playerPlaying = false;
    private int _currentGameId = -1;
    static string _defaultStyle = "background-color: #131313;";
    static string _onGameStyle = "border: 4px solid rgba(152,203,43,1); border-radius:10px;";


    private static void SelectFile()
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            openFileDialog.Filter = "Executable files (*.exe)|*.exe|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = openFileDialog.FileName;
                _selectedFile = fullPath;
                _newGame.Location = fullPath;
            }
            else
            {
                _selectedFile = null;
            }
        }
    }

    private void ShowEditPanel(int gameId)
    {
        _currentEditGameId = gameId;
    }

    private void SaveEdit(int gameId)
    {
        var game = _gamesList.FirstOrDefault(g => g.Id == gameId);
        if (game != null)
        {
            GameData.GamesData.SaveToJSON(_gamesList);
        }

        _currentEditGameId = null;
    }

    private void CancelEdit()
    {
        _currentEditGameId = null;
    }

    private void StartGame(string _path)
    {
        try
        {
            Process firstProc = new Process();
            firstProc.StartInfo.FileName = _path;
            firstProc.StartInfo.WorkingDirectory = Path.GetDirectoryName(_path);
            firstProc.EnableRaisingEvents = true;
            firstProc.Start();
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message);
        }
    }

    static void ToggleForm() => _showAddGameForm = !_showAddGameForm;

    public static async Task AddGameAsync()
    {
        int _id = _gamesList.Any() ? _gamesList.Max(g => g.Id) + 1 : 1;
        if (!string.IsNullOrEmpty(_selectedFile))
        {
            try
            {
                var game = await _steamGridDb.SearchForGamesAsync(_newGame.Title);
                var icons = await _steamGridDb.GetGridsForGameAsync(game[0], dimensions: SteamGridDbDimensions.W920H430);
                var imageUrl = icons[0].FullImageUrl;
                _gamesList.Add(new GameModel()
                {
                    Id = _id,
                    ImageUrl = imageUrl,
                    Location = _newGame.Location,
                    TimeInfo = "0h 0m",
                    Title = _newGame.Title
                });
                _newGame = new GameModel();
                _showAddGameForm = false;
                _selectedFile = null;
                GameData.GamesData.SaveToJSON(_gamesList);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.Message, "Error");
            }
        }
    }

    public static async Task AddGameFromAnotherAsync(int _id, string _location, string _gameName)
    {
        try
        {
            var game = await _steamGridDb.SearchForGamesAsync(_gameName);
            var icons = await _steamGridDb.GetGridsForGameAsync(game[0], dimensions: SteamGridDbDimensions.W920H430);
            var imageUrl = icons[0].FullImageUrl;
            _gamesList.Add(new GameModel()
            {
                Id = _id,
                ImageUrl = imageUrl,
                Location = _location,
                TimeInfo = "0h 0m",
                Title = _gameName.Replace("&#8211;", "-")
                    .Replace("&#038;", "&")
                    .Replace("&#8217;", "`")
            });
            _newGame = new GameModel();
            _showAddGameForm = false;
            _selectedFile = null;
            GameData.GamesData.SaveToJSON(_gamesList);
        }
        catch (Exception e)
        {
            MessageBox.Show(e.Message, "Error");
        }
    }


    private void DeleteGame(GameModel gameToRemove)
    {
        _gamesList.Remove(gameToRemove);
        GameData.GamesData.SaveToJSON(_gamesList);
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAsync();
    }

    private async Task UpdateAsync()
    {
        while (true)
        {
            GamesHelper.IfGameFromListDeleted(_gamesList);
            var _game = GamesHelper.GameFromListIsRunning(_gamesList);
            if (_game.isRunning)
            {
                _currentGameId = int.Parse(_game.gameId);
                CountTimeHelper.Count(_gamesList, _game.gameLocation);
            }
            else
            {
                _currentGameId = -1;
            }
            await Task.Delay(1000);
            InvokeAsync(StateHasChanged);
        }
    }
}