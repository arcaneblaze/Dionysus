@page "/"

@using craftersmine.SteamGridDBNet
@using Dionysus.App.Data
@using Dionysus.App.Helpers
@using Dionysus.App.Models
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-k6RqeWeci5ZR/Lv4MR0sA0FfDOMt23w54fH4YBBvaWv6zwE5aEmGZ+W2smWjq5" crossorigin="anonymous">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">

<!--style block-->
<style>
    html, body {
        font-family: 'Roboto', sans-serif;
        padding: 100px;
        margin: 0 auto;
        user-select: none;
        background-color: #151515;
        color: white;
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
    img {
        pointer-events: none;
    }
    h1:focus {
        outline: none;
    }

    a, .btn-link {
        color: #0071c1;
    }

    .game-list {
        max-width: 800px;
        margin: 0 auto;
        padding: 30px;
    }
    .game-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #131313;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        padding: 20px;
        margin-bottom: 20px;
        position: relative;
    }
    .game-item img {
        width: 60px;
        height: 60px;
        border-radius: 10px;
    }
    .game-info {
        flex: 1;
        margin-left: 20px;
    }
    .game-info h3 {
        margin: 0 0 5px;
        font-size: 18px;
    }
    .game-info p {
        margin: 0;
        font-size: 14px;
        color: #ccc;
    }
    .add-game-button {
        background-color: #151515;
        color: #fff;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        padding: 12px 24px;
        font-size: 12px;
        display: block;
        margin: 20px auto;
        cursor: pointer;
        text-align: center;
        transition: background-color 0.3s, transform 0.3s;
    }

    .add-game-button:hover {
        background-color: #555;
        transform: scale(1.05);
    }

    .add-game-button:active{
        transform: scale(0.97);
    }

    .add-game-form {
        display: block;
        background-color: #131313;
        padding: 20px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        margin-top: 20px;
    }
    .add-game-form input, .add-game-form textarea {
        width: 97%;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        background-color: #151515;
        color: #fff;
    }
    .add-game-form button {
        background-color: #151515;
        color: #fff;
        width: 100px;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        padding: 10px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
    }

    .add-game-form button:hover {
        background-color: #555;
        transform: scale(1.05);
    }

    .add-game-form button:active{
        transform: scale(0.97);
    }

    .game-item .fa-trash {
        background: none;
        border: none;
        color: red;
        cursor: pointer;
        font-size: 20px;
        transition: background-color 0.3s, transform 0.3s;
    }
    .game-item .fa-trash:hover{
        transform: scale(1.08);
    }
    .game-item .fa-trash:active{
        transform: scale(0.97);
    }

    .custom-file-input {
        position: relative;
        display: inline-block;
        width: 100%;
        height: 40px;
        margin-bottom: 10px;
    }

    .custom-file-input input[type="file"] {
        position: absolute;
        top: 0;
        right: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    .custom-file-label {
        display: inline-block;
        width: 100%;
        height: 100%;
        line-height: 40px;
        background-color: #131313;
        text-align: center;
        color: #fff;
        border-radius: 10px;
        border-style: solid;
        border-color: #323232;
        border-width: 0.2px;
        cursor: pointer;
        user-select: none;
        transition: background-color 0.3s, transform 0.3s;
    }

    .custom-file-label:hover {
        background-color: #555;
        transform: scale(1.03);
    }

    .custom-file-label:active{
        transform: scale(0.97);
    }

</style>

<div class="game-list">
    @foreach (var game in _gamesList)
    {
    <div class="game-item" style="@(game.Id == _currentGameId ? _onGameStyle : _defaultStyle)">
        <img src="@game.ImageUrl" alt="@game.Title">
        <div class="game-info">
            <h3>@game.Title</h3>
            <p>Play time: @game.TimeInfo</p>
        </div>
        <button class="fa fa-trash" id="delete" @onclick="() => DeleteGame(game)"></button>
    </div>
    }
    @if (!_gamesList.Any())
    {
        <h2 style="text-align: center; width: 100%; color: #323232">Empty.</h2>
    }

    
    @if (_showAddGameForm)
    {
    <div id="add-game-form" class="add-game-form">
        <input type="text" @bind="_newGame.Title" placeholder="Title (Only in English)" required="required">
        <div class="custom-file-input">
            <label class="custom-file-label" @onclick="@SelectFile" for="fileInput">@(_selectedFile != null ? _selectedFile : "Choose .exe file")</label>
        </div>
        <button @onclick="AddGameAsync">Add</button> <button @onclick="ToggleForm">Close</button>

    </div>
    }

    @if (!_showAddGameForm)
    {
        <button class="add-game-button fa fa-plus" @onclick="ToggleForm"></button>
    }

</div>
@code {
    private static string _errorText;
    private static JObject configJson = (JObject)JsonConvert.DeserializeObject(System.IO.File.ReadAllText("env.json"));
    private static string steamGDBAPI = configJson["steamGDBAPI"].Value<string>();
    static SteamGridDb _steamGridDb = new SteamGridDb(steamGDBAPI);
    static List<GameModel> _gamesList = GameData.GamesData.ParseGamesFromJSON().ToList();
    static bool _showAddGameForm = false;
    static GameModel _newGame = new GameModel();
    private static string _selectedFile;

    static bool _playerPlaying = false;
    private int _currentGameId = -1;
    static string _defaultStyle = "background-color: #131313;";
    static string _onGameStyle = "background: linear-gradient(149deg, rgba(2,0,36,1) 0%, rgba(152,203,43,1) 0%, rgba(19,19,19,1) 64%);";

    private void SelectFile()
    {
        using (OpenFileDialog openFileDialog = new OpenFileDialog())
        {
            openFileDialog.Filter = "Executable files (*.exe)|*.exe|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = openFileDialog.FileName;
                _selectedFile = fullPath;
                _newGame.Location= fullPath;
            }
        }
    }


    static void ToggleForm() => _showAddGameForm = !_showAddGameForm;

    public static async Task AddGameAsync()
    {
        int _id = _gamesList.Any() ? _gamesList.Max(g => g.Id) + 1 : 1;

        try
        {
            var game = await _steamGridDb.SearchForGamesAsync(_newGame.Title);
            var icons = await _steamGridDb.GetIconsForGameAsync(game[0]);
            var imageUrl = icons[0].FullImageUrl;
            _gamesList.Add(new GameModel()
            {
                Id = _id,
                ImageUrl = imageUrl,
                Location = _newGame.Location,
                TimeInfo = "0h 0m",
                Title = _newGame.Title
            });
            _newGame = new GameModel();
            _showAddGameForm = false;
            _selectedFile = null;
            GameData.GamesData.SaveToJSON(_gamesList);
        }
        catch (Exception e)
        {
            MessageBox.Show(e.Message, "Error");
        }
    }
    
    public static async Task AddGameFromAnotherAsync(int _id, string _location, string _gameName)
    {
        try
        {
            var game = await _steamGridDb.SearchForGamesAsync(_gameName);
            var icons = await _steamGridDb.GetIconsForGameAsync(game[0]);
            var imageUrl = icons[0].FullImageUrl;
            _gamesList.Add(new GameModel()
            {
                Id = _id,
                ImageUrl = imageUrl,
                Location = _location,
                TimeInfo = "0h 0m",
                Title = _gameName.Replace("&#8211;", "-")
                    .Replace("&#038;","&")
                    .Replace("&#8217;","`")
            });
            _newGame = new GameModel();
            _showAddGameForm = false;
            _selectedFile = null;
            GameData.GamesData.SaveToJSON(_gamesList);
        }
        catch (Exception e)
        {
            MessageBox.Show(e.Message, "Error");
        }
    }

    private void DeleteGame(GameModel gameToRemove)
    {
        _gamesList.Remove(gameToRemove);
        GameData.GamesData.SaveToJSON(_gamesList);
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateAsync();
    }

    private async Task UpdateAsync()
    {
        while (true)
        {
            GamesHelper.IfGameFromListDeleted(_gamesList);
            var _game = GamesHelper.GameFromListIsRunning(_gamesList);
            if (_game.isRunning)
            {
                _currentGameId = int.Parse(_game.gameId);
                CountTimeHelper.Count(_gamesList, _game.gameLocation);
            }
            else
            {
                _currentGameId = -1;
            }
            await Task.Delay(1000);
            InvokeAsync(StateHasChanged);
        }
    }
}